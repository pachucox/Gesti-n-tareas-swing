/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app_portafolio.views;

import app_portafolio.controller.ClienteController;
import app_portafolio.controller.DepartamentoController;
import app_portafolio.model.Cliente;
import app_portafolio.model.Departamento;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mario
 */
public class Departamentos extends javax.swing.JFrame {

    
    
    DefaultTableModel tabla = new DefaultTableModel();
    ClienteController c = new ClienteController();
    Object clientes[][] = new Object[c.leerClientes().size()][2];
    DepartamentoController controler = new DepartamentoController();
    final Class[] tiposColumnas = new Class[]{
            int.class,
            java.lang.String.class,
            int.class,
            java.lang.String.class,
     };
    
    String[] columnas = new String[]{
            "ID",
            "Nombre",
            "ID Cliente",
            "Nombre Cliente"
        };
    
    
    /**
     * Creates new form Departamentos
     */
    public Departamentos() throws IOException {
        initComponents();
        this.setLocationRelativeTo(null);
        this.cmbClientes.setModel(llenarComboBoxCliente());
        this.llenarClientes();
        this.llenarTabla();
        this.llenarCampos();
    }
    
    void llenarTabla() throws IOException {
        tabla = (DefaultTableModel) this.tablaDeptos.getModel();
        tabla.setRowCount(0);
        String nombreCliente = "";
        Object matriz[][] = new Object[this.controler.leerDeptos().size()][4];
        for (int i = 0; i < this.controler.leerDeptos().size(); i++) {
            
            int idCliente = this.controler.leerDeptos().get(i).getCliente_id_cliente();
            for (int x = 0; x < this.c.leerClientes().size(); x++) {
                if (String.valueOf(idCliente).equals(String.valueOf(clientes[x][0]))) {
                    nombreCliente = this.c.leerClientes().get(x).getNombre_cliente();
                    break;
                }
            }

            matriz[i][0] = String.valueOf((this.controler.leerDeptos().get(i).getId_departamento()));
            matriz[i][1] = this.controler.leerDeptos().get(i).getNombre_departamento();
            matriz[i][2] = idCliente;
            matriz[i][3] = nombreCliente;
        }
        this.tablaDeptos.setModel(new javax.swing.table.DefaultTableModel(
                matriz,
                columnas) {
            //Esta variable nos permite conocer de antemano los tipos de datos de cada columna, dentro del TableModel
            Class[] tipos = tiposColumnas;
        });
    }
    
    void llenarCampos(){
        this.tablaDeptos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int fila = tablaDeptos.getSelectedRow();
                
                String nombre = tablaDeptos.getModel().getValueAt(fila, 1).toString();
                String cliente = tablaDeptos.getModel().getValueAt(fila,3).toString();
                txtNombre.setText(nombre);
                cmbClientes.setSelectedItem(cliente);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaDeptos = new javax.swing.JTable();
        btnAgregar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnInicio = new javax.swing.JButton();
        cmbClientes = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre : ");

        jLabel2.setText("Cliente : ");

        txtNombre.setText("  ");

        tablaDeptos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "ID Cliente", "Nombre Cliente"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaDeptos);

        btnAgregar.setForeground(new java.awt.Color(0, 204, 51));
        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        btnEliminar.setForeground(new java.awt.Color(255, 51, 51));
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnLimpiar.setForeground(new java.awt.Color(51, 102, 255));
        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnInicio.setText("Inicio");
        btnInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInicioActionPerformed(evt);
            }
        });

        cmbClientes.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnActualizar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar)))
                .addGap(83, 83, 83))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addGap(200, 200, 200)
                .addComponent(btnInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbClientes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(btnEliminar)
                    .addComponent(btnActualizar)
                    .addComponent(btnLimpiar))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(btnInicio)
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed

        try {
            if(txtNombre.getText().length() < 4){
                JOptionPane.showMessageDialog(null, "Nombre debe contener al menos 4 letrass");
            }else if (this.cmbClientes.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente");
            }else{
                this.Agregar();
            }
        } catch (IOException ex) {
            Logger.getLogger(Departamentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
         try {
            if (this.tablaDeptos.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un departamento en la tabla");
            }else{
                this.Eliminar();
                this.Limpiar();
            }
        } catch (IOException ex) {
            Logger.getLogger(Departamentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
             try {
            if (this.tablaDeptos.getSelectedRow() == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un departamento en la tabla");
            } else if (txtNombre.getText().length() < 4) {
                JOptionPane.showMessageDialog(null, "El nombre de departamento debe contener al menos 4 letras");
            } else if (this.cmbClientes.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un cliente");
            } else {
                this.Actualizar();
                this.llenarTabla();
            }
        } catch (IOException ex) {
            Logger.getLogger(Usuarios.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        this.Limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInicioActionPerformed
     
            try{
            Inicio i = new Inicio();
            i.setVisible(true);
            this.dispose();    
        }catch (IOException ex) {
            Logger.getLogger(Departamentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnInicioActionPerformed

    
    DefaultComboBoxModel llenarComboBoxCliente() throws IOException {
        DefaultComboBoxModel combo = new DefaultComboBoxModel();
        combo.addElement("Seleccione");
        for (Cliente lista : this.c.leerClientes()) {
            combo.addElement(lista.getNombre_cliente());
        }
        return combo;
    }
    
     void llenarClientes() throws IOException {
        for (int i = 0; i < this.c.leerClientes().size(); i++) {
            this.clientes[i][0] = String.valueOf((this.c.leerClientes().get(i).getId_cliente()));
            this.clientes[i][1] = this.c.leerClientes().get(i).getNombre_cliente();
        }
    }
    
    void Agregar() throws IOException{
        Departamento d = new Departamento();
        int id = 0;
        tabla = (DefaultTableModel) this.tablaDeptos.getModel();
        d.setNombre_departamento(txtNombre.getText());
        String cliente = this.cmbClientes.getItemAt(this.cmbClientes.getSelectedIndex());
        String nombreCliente= "";
        
         for (int i = 0; i < this.c.leerClientes().size(); i++) {
            if (cliente.equals(String.valueOf(this.clientes[i][1]))) {
                d.setCliente_id_cliente(((this.c.leerClientes().get(i).getId_cliente())));
                nombreCliente = this.c.leerClientes().get(i).getNombre_cliente();
            }
        }
       
        try {
            id = controler.agregarDepto(d).getId_departamento();
            this.tabla.addRow(new Object[]{
                id,d.getNombre_departamento(),d.getCliente_id_cliente(),nombreCliente
            });
            JOptionPane.showMessageDialog(null, "Departamento Agregado Correctamente");
            this.Limpiar();
        } catch (IOException ex) {
            Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
        }   
    }
    
       void Actualizar() throws IOException{
       Departamento d = new Departamento();
       int fila = this.tablaDeptos.getSelectedRow();
       int id = Integer.parseInt(this.tablaDeptos.getModel().getValueAt(fila, 0).toString());
       
        d.setId_departamento(id);
        d.setNombre_departamento(txtNombre.getText());
        String cliente = this.cmbClientes.getItemAt(this.cmbClientes.getSelectedIndex());
        
        
         for (int i = 0; i < this.c.leerClientes().size(); i++) {
            if (cliente.equals(String.valueOf(this.clientes[i][1]))) {
                d.setCliente_id_cliente(((this.c.leerClientes().get(i).getId_cliente())));
                break;
            }
        }

        this.controler.actualizarDepto(d);
       JOptionPane.showMessageDialog(null, "Departamento Actualizado Correctamente");
       this.Limpiar();
   }
    
     void Eliminar() throws IOException {
        int fila = this.tablaDeptos.getSelectedRow();
        int id = Integer.parseInt(this.tablaDeptos.getValueAt(fila, 0).toString());
        this.tabla = (DefaultTableModel) this.tablaDeptos.getModel();
        try {
            this.controler.eliminarDepto(id);
            tabla.removeRow(fila);
            JOptionPane.showMessageDialog(null, "Departamento eliminado correctamente");
            this.Limpiar();
        } catch (IOException ex) {
            Logger.getLogger(Departamentos.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
     
    void Limpiar() {
        this.txtNombre.setText("");
        this.cmbClientes.setSelectedIndex(0);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Departamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Departamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Departamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Departamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               try{
                    new Departamentos().setVisible(true);    
                }catch (IOException ex) {
                    Logger.getLogger(Departamentos.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnInicio;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cmbClientes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaDeptos;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
